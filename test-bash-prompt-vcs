#!/usr/bin/env bash
set -e
set -u

function check() {
    echo -n "$1: "
    # Run function once to gather output to check and then again
    # in the local symbol space to help check for symbol leakage.
    local prompt=$(bpvcs_bash_prompt)
    bpvcs_bash_prompt >/dev/null
    if [ "$prompt" = "$2" ]; then
        echo "OK."
    else
        echo "FAILED. Expected: '$2' got '$prompt'"
        echo $tmpdir
        exit
    fi

}

function test_none() {
    cd "$tmpdir"
    check "none" ""
}

function run_git() {
    git "$@" >/dev/null || echo "git run failed"
}

function test_git() {
    local gitdir=$(mktemp -d --tmpdir=$tmpdir test_git.XXX)
    cd "$gitdir"

    run_git init
    check "git init" "$GIT_PREFIX(Initial commit on master|✔)$SUFFIX"

    echo "First post!" >first.txt
    run_git add first.txt
    check "git add" "$GIT_PREFIX(Initial commit on master|●1)$SUFFIX"

    run_git commit -m first
    check "git added" "$GIT_PREFIX(master|✔)$SUFFIX"

    echo "No tracked" >"$gitdir/notme"
    check "git untracked" "$GIT_PREFIX(master|…1)$SUFFIX"

    echo "Changed!" >first.txt
    check "git change" "$GIT_PREFIX(master|…1△1)$SUFFIX"

    echo "toooooo" >second.txt
    check "git various" "$GIT_PREFIX(master|…2△1)$SUFFIX"

    run_git add second.txt
    check "git staged" "$GIT_PREFIX(master|…1△1●1)$SUFFIX"

    run_git commit -m "moar files"
    check "git commit part" "$GIT_PREFIX(master|…1△1)$SUFFIX"

    run_git mv second.txt 2nd.txt
    check "git rename" "$GIT_PREFIX(master|…1△1●1)$SUFFIX"

    run_git commit -a -m "save it all"
    check "git almost clean" "$GIT_PREFIX(master|…1)$SUFFIX"

    echo "notme" >"$gitdir/.gitignore"
    check "git ignore" "$GIT_PREFIX(master|…1)$SUFFIX"

    run_git add ".gitignore"
    run_git commit ".gitignore" -m "nothing to see here"
    check "git faux clean" "$GIT_PREFIX(master|✔)$SUFFIX"

    rm "$gitdir/notme"
    check "git clean" "$GIT_PREFIX(master|✔)$SUFFIX"

    run_git checkout -b riskychange
    check "git branch" "$GIT_PREFIX(riskychange|✔)$SUFFIX"

    run_git checkout master
    check "git master" "$GIT_PREFIX(master|✔)$SUFFIX"

    function git() {
        echo "Nonesense"
    }
    check "git bad status" ""

    unset git
    check "git back to good" "$GIT_PREFIX(master|✔)$SUFFIX"
}

function run_hg() {
    hg "$@" >/dev/null || echo "hg run failed"
}

function test_hg() {
    local hgdir=$(mktemp -d --tmpdir=$tmpdir test_hg.XXX)
    cd "$hgdir"

    run_hg init
    check "hg init" "$HG_PREFIX(default|✔)$SUFFIX"

    echo "First post!" >first.txt
    run_hg add first.txt
    check "hg add" "$HG_PREFIX(default|△1)$SUFFIX"

    run_hg commit -m first
    check "hg added" "$HG_PREFIX(default|✔)$SUFFIX"

    echo "No tracked" >"$hgdir/notme"
    check "hg untracked" "$HG_PREFIX(default|…1)$SUFFIX"

    echo "Changed!" >first.txt
    check "hg change" "$HG_PREFIX(default|…1△1)$SUFFIX"

    echo "toooooo" >second.txt
    check "hg various" "$HG_PREFIX(default|…2△1)$SUFFIX"

    run_hg add second.txt
    check "hg add second" "$HG_PREFIX(default|…1△2)$SUFFIX"

    run_hg commit -m "moar files"
    check "hg commit" "$HG_PREFIX(default|…1)$SUFFIX"

    run_hg rename second.txt 2nd.txt
    check "hg rename" "$HG_PREFIX(default|…1△1)$SUFFIX"

    run_hg commit -m "save it all"
    check "hg almost clean" "$HG_PREFIX(default|…1)$SUFFIX"

    echo "notme" >"$hgdir/.hgignore"
    check "hg ignore" "$HG_PREFIX(default|…1)$SUFFIX"

    run_hg add ".hgignore"
    run_hg commit ".hgignore" -m "nothing to see here"
    check "hg faux clean" "$HG_PREFIX(default|✔)$SUFFIX"

    rm "$hgdir/notme"
    check "hg clean" "$HG_PREFIX(default|✔)$SUFFIX"

    run_hg branch riskychange
    check "hg branch" "$HG_PREFIX(riskychange|✔)$SUFFIX"

    run_hg branch --clean
    check "hg default again" "$HG_PREFIX(default|✔)$SUFFIX"

    function hg() {
        echo "Nonesense"
    }
    check "hg bad status" ""

    unset hg
    check "hg back to good" "$HG_PREFIX(default|✔)$SUFFIX"
}

function run_svnadmin() {
    svnadmin "$@" >/dev/null || echo "svnadmin run failed"
}

function run_svn() {
    svn "$@" >/dev/null || echo "svn run failed"
}

function test_svn() {
    local svndir=$(mktemp -d --tmpdir=$tmpdir test_svn.XXX)
    cd "$svndir"
    run_svnadmin create SVNROOT

    run_svn checkout "file://$svndir/SVNROOT" trunk
    cd "trunk"
    check "svn init" "$SVN_PREFIX(✔)$SUFFIX"

    echo "First post!" >first.txt
    run_svn add first.txt
    check "svn add" "$SVN_PREFIX(△1)$SUFFIX"

    run_svn commit -m first
    check "svn added" "$SVN_PREFIX(✔)$SUFFIX"

    echo "No tracked" >"$svndir/trunk/notme"
    check "svn untracked" "$SVN_PREFIX(…1)$SUFFIX"

    echo "Changed!" >first.txt
    check "svn change" "$SVN_PREFIX(…1△1)$SUFFIX"

    echo "toooooo" >second.txt
    check "svn various" "$SVN_PREFIX(…2△1)$SUFFIX"

    run_svn add second.txt
    check "svn add second" "$SVN_PREFIX(…1△2)$SUFFIX"

    run_svn commit -m "moar files"
    check "svn commit" "$SVN_PREFIX(…1)$SUFFIX"

    run_svn rename second.txt 2nd.txt
    check "svn rename" "$SVN_PREFIX(…1△1)$SUFFIX"

    run_svn commit -m "save it all"
    check "svn almost clean" "$SVN_PREFIX(…1)$SUFFIX"

    run_svn propset svn:ignore "notme" .
    check "svn ignore" "$SVN_PREFIX(△1)$SUFFIX"

    # NOTE: The update is needed!
    # See http://subversion.apache.org/faq.html#wc-out-of-date
    run_svn update
    run_svn commit -m "nothing to see here"
    check "svn faux clean" "$SVN_PREFIX(✔)$SUFFIX"

    rm "$svndir/trunk/notme"
    check "svn clean" "$SVN_PREFIX(✔)$SUFFIX"

    function svn() {
        echo "Nonesense"
    }
    check "svn bad status" ""

    unset svn
    check "svn back to good" "$SVN_PREFIX(✔)$SUFFIX"
}

function test_all() {
    test_none && \
    test_git && \
    test_hg && \
    test_svn
}

function test_outputs() {
    # Make a home to work in.
    local tmpdir=$(mktemp -d --tmpdir bpvcs-test-XXX)

    # Run through all of the tests with color making sure the output is
    # wrapped correctly with color prefixes and suffixes.
    local SUFFIX=$(echo -e "\033[0m")
    local GIT_PREFIX=$(echo -e "$BPVCS_GIT_COLOR ")
    local HG_PREFIX=$(echo -e "$BPVCS_HG_COLOR ")
    local SVN_PREFIX=$(echo -e "$BPVCS_SVN_COLOR ")

    test_all
    echo

    # Run all tests again, this time with colors off and making sure that the
    # non-color prefixes are used.
    echo Testing without colors
    SUFFIX=""
    GIT_PREFIX=" git:"
    HG_PREFIX=" hg:"
    SVN_PREFIX=" svn:"
    unset BPVCS_COLORS

    test_all

    # Clean up the temp dir.
    if [ -n "$tmpdir" ]; then
        rm -rf "$tmpdir"
    fi
}

function shell_state() {
    compgen -A variable | sort
    compgen -A function | sort
}

echo Testing sourcing and symbols

# unset everything it might provide in case it's running on the test host.
unset BPVCS_CHANGED_INDICATOR
unset BPVCS_CLEAN_INDICATOR
unset BPVCS_COLORS
unset BPVCS_GIT_COLOR
unset BPVCS_HG_COLOR
unset BPVCS_STAGED_INDICATOR
unset BPVCS_SVN_COLOR
unset BPVCS_UNTRACKED_INDICATOR
unset bpvcs_bash_prompt

test_bpvcs_before=$(shell_state)

source bash-prompt-vcs.bash

test_bpvcs_loaded=$(shell_state)

test_bpvcs_new_symbols=$(diff <(printf "%s" "$test_bpvcs_before" )  <(printf "%s" "$test_bpvcs_loaded") \
                            | grep '>' \
                            | grep -v '^> PIPESTATUS$' \
                            | grep -v '^> test_bpvcs_')

test_bpvcs_expected_symbols=""
test_bpvcs_expected_symbols+=$'> BPVCS_CHANGED_INDICATOR\n'
test_bpvcs_expected_symbols+=$'> BPVCS_CLEAN_INDICATOR\n'
test_bpvcs_expected_symbols+=$'> BPVCS_COLORS\n'
test_bpvcs_expected_symbols+=$'> BPVCS_GIT_COLOR\n'
test_bpvcs_expected_symbols+=$'> BPVCS_HG_COLOR\n'
test_bpvcs_expected_symbols+=$'> BPVCS_STAGED_INDICATOR\n'
test_bpvcs_expected_symbols+=$'> BPVCS_SVN_COLOR\n'
test_bpvcs_expected_symbols+=$'> BPVCS_UNTRACKED_INDICATOR\n'
test_bpvcs_expected_symbols+=$'> bpvcs_bash_prompt'

if [ "$test_bpvcs_new_symbols" != "$test_bpvcs_expected_symbols" ]; then
    echo "Unexpected symbols when loading: $test_bpvcs_new_symbols"
    exit
fi
echo

# Confirm these rather than using the variables up above so the tests remain
# somewhat readable and useful for looking at to see what the code will output.
echo Testing default indicators
if [ "$BPVCS_UNTRACKED_INDICATOR" != "…" ]; then echo "Wrong default untracked indicator"; exit; fi
if [ "$BPVCS_CHANGED_INDICATOR" != "△" ]; then echo "Wrong default changed indicator"; exit; fi
if [ "$BPVCS_STAGED_INDICATOR" != "●" ]; then echo "Wrong default staged indicator"; exit; fi
if [ "$BPVCS_CLEAN_INDICATOR" != "✔" ]; then echo "Wrong default clean indicator"; exit; fi
echo

# Make sure we have default colors defined and that we default to using color.
echo Testing default colors
if [ -z "$BPVCS_GIT_COLOR" ]; then echo "No GIT default color!"; exit; fi
if [ -z "$BPVCS_HG_COLOR" ]; then echo "No HG default color!"; exit; fi
if [ -z "$BPVCS_SVN_COLOR" ]; then echo "No SVN default color!"; exit; fi
if [ -z "$BPVCS_COLORS" ]; then echo "No default color!"; exit; fi

test_outputs
echo

echo Testing symbol leakage after all tests run

test_bpvcs_after=$(shell_state)

test_bpvcs_leaked_symbols=$(diff <(printf "%s" "$test_bpvcs_loaded" )  <(printf "%s" "$test_bpvcs_after") \
                                | grep '>' \
                                | grep -v '^> PIPESTATUS$' \
                                | grep -v '^> OLDPWD$' \
                                | grep -v '^> test_bpvcs_')

if [ -n "$test_bpvcs_leaked_symbols" ]; then
    echo "Unexpected symbols after tests ran: $test_bpvcs_leaked_symbols"
    exit
fi
