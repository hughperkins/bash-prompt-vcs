#!/bin/bash

source bash-prompt-vcs.bash

#TODO: check that function exists
#TODO: check default of color var


tmpdir=$(mktemp -d --tmpdir bpvcs-test-XXX)

function check() {
    echo -n "$1: "
    prompt=$(bpvcs_bash_prompt)
    if [ "$prompt" = "$2" ]; then
        echo "OK."
    else
        echo "FAILED. Expected: '$2' got '$prompt'"
        echo $tmpdir
        exit
    fi

}

function test_none() {
    cd "$tmpdir"
    check "none" ""
}

function run_git() {
    git "$@" >/dev/null || echo "git run failed"
}

function test_git() {
    gitdir=$(mktemp -d --tmpdir=$tmpdir test_git.XXX)
    cd "$gitdir"

    run_git init
    check "git init" " git:(Initial commit on master|✔)"

    echo "First post!" >first.txt
    run_git add first.txt
    check "git add" " git:(Initial commit on master|●1)"

    run_git commit -m first
    check "git added" " git:(master|✔)"

    echo "No tracked" >"$gitdir/notme"
    check "git untracked" " git:(master|…1)"

    echo "Changed!" >first.txt
    check "git change" " git:(master|…1△1)"

    echo "toooooo" >second.txt
    check "git various" " git:(master|…2△1)"

    run_git add second.txt
    check "git staged" " git:(master|…1△1●1)"

    run_git commit -m "moar files"
    check "git commit part" " git:(master|…1△1)"

    run_git mv second.txt 2nd.txt
    check "git rename" " git:(master|…1△1●1)"

    run_git commit -a -m "save it all"
    check "git almost clean" " git:(master|…1)"

    echo "notme" >"$gitdir/.gitignore"
    check "git ignore" " git:(master|…1)"

    run_git add ".gitignore"
    run_git commit ".gitignore" -m "nothing to see here"
    check "git faux clean" " git:(master|✔)"

    rm "$gitdir/notme"
    check "git clean" " git:(master|✔)"

    run_git checkout -b riskychange
    check "git branch" " git:(riskychange|✔)"

    run_git checkout master
    check "git master" " git:(master|✔)"

    function git() {
        echo "Nonesense"
    }
    check "git bad status" ""

    unset git
    check "git back to good" " git:(master|✔)"
}

function run_hg() {
    hg "$@" >/dev/null || echo "hg run failed"
}

function test_hg() {
    hgdir=$(mktemp -d --tmpdir=$tmpdir test_hg.XXX)
    cd "$hgdir"

    run_hg init
    check "hg init" " hg:(default|✔)"

    echo "First post!" >first.txt
    run_hg add first.txt
    check "hg add" " hg:(default|△1)"

    run_hg commit -m first
    check "hg added" " hg:(default|✔)"

    echo "No tracked" >"$hgdir/notme"
    check "hg untracked" " hg:(default|…1)"

    echo "Changed!" >first.txt
    check "hg change" " hg:(default|…1△1)"

    echo "toooooo" >second.txt
    check "hg various" " hg:(default|…2△1)"

    run_hg add second.txt
    check "hg add second" " hg:(default|…1△2)"

    run_hg commit -m "moar files"
    check "hg commit" " hg:(default|…1)"

    run_hg rename second.txt 2nd.txt
    check "hg rename" " hg:(default|…1△1)"

    run_hg commit -m "save it all"
    check "hg almost clean" " hg:(default|…1)"

    echo "notme" >"$hgdir/.hgignore"
    check "hg ignore" " hg:(default|…1)"

    run_hg add ".hgignore"
    run_hg commit ".hgignore" -m "nothing to see here"
    check "hg faux clean" " hg:(default|✔)"

    rm "$hgdir/notme"
    check "hg clean" " hg:(default|✔)"

    run_hg branch riskychange
    check "hg branch" " hg:(riskychange|✔)"

    run_hg branch --clean
    check "hg default again" " hg:(default|✔)"

    function hg() {
        echo "Nonesense"
    }
    check "hg bad status" ""

    unset hg
    check "hg back to good" " hg:(default|✔)"
}

function run_svnadmin() {
    svnadmin "$@" >/dev/null || echo "svnadmin run failed"
}

function run_svn() {
    svn "$@" >/dev/null || echo "svn run failed"
}

function test_svn() {
    svndir=$(mktemp -d --tmpdir=$tmpdir test_svn.XXX)
    cd "$svndir"
    run_svnadmin create SVNROOT

    run_svn checkout "file://$svndir/SVNROOT" trunk
    cd "trunk"
    check "svn init" " svn:(✔)"

    echo "First post!" >first.txt
    run_svn add first.txt
    check "svn add" " svn:(△1)"

    run_svn commit -m first
    check "svn added" " svn:(✔)"

    echo "No tracked" >"$svndir/trunk/notme"
    check "svn untracked" " svn:(…1)"

    echo "Changed!" >first.txt
    check "svn change" " svn:(…1△1)"

    echo "toooooo" >second.txt
    check "svn various" " svn:(…2△1)"

    run_svn add second.txt
    check "svn add second" " svn:(…1△2)"

    run_svn commit -m "moar files"
    check "svn commit" " svn:(…1)"

    run_svn rename second.txt 2nd.txt
    check "svn rename" " svn:(…1△1)"

    run_svn commit -m "save it all"
    check "svn almost clean" " svn:(…1)"

    run_svn propset svn:ignore "notme" .
    check "svn ignore" " svn:(△1)"

    # NOTE: The update is needed!
    # See http://subversion.apache.org/faq.html#wc-out-of-date
    run_svn update
    run_svn commit -m "nothing to see here"
    check "svn faux clean" " svn:(✔)"

    rm "$svndir/trunk/notme"
    check "svn clean" " svn:(✔)"

    function svn() {
        echo "Nonesense"
    }
    check "svn bad status" ""

    unset svn
    check "svn back to good" " svn:(✔)"
}

unset color_vcs_bash_prompt
test_none && \
test_git && \
test_hg && \
test_svn

if [ -n "$tmpdir" ]; then
    rm -rf "$tmpdir"
fi

